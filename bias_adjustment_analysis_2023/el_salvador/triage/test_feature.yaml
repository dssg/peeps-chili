config_version: 'v7'

model_comment: 'dropouts_triage_v7'

temporal_config:
    feature_start_time: '2009-01-01'
    feature_end_time: '2012-01-01'

    label_start_time: '2010-01-01'
    label_end_time: '2013-01-01'

    model_update_frequency: '1y'
    max_training_histories: ['5y']
    test_durations: ['1y']
    training_as_of_date_frequencies: ['1y']
    test_as_of_date_frequencies: ['1y']
    label_timespans: ['1y']

cohort_config:

  query: |
    select distinct(student)::int as entity_id
    from semantic.events_student
    where
    event_date = '{as_of_date}'::date and
    length(student) > 3 and length(student) < 9
  name: 'student'

label_config:
  query: |
    with partitioned as (
    select student,
    array_agg(distinct grado_code) as grado_codes, -- Aggregates of grado_codes and promotion_status within the year
    array_agg(distinct promotion_status) as passed,
    event_date,
    case
        when 'GENERAL' = any(array_agg(bach_modalidad)) then 11  -- If the student is in any bachillerato general during the year, the final year is considered to be 11. This fails for students that are in General in 11, move to Vocacional in 11, and then dropout.
        when ARRAY['TECNICO VOCACIONAL', 'APREMAT', 'PILET'] && array_agg(bach_modalidad) then 12  -- If the student is in any of the other types of bachillerato, the final year is 12.
        else NULL::int end as final_bach_year,
    lead(event_date) over (partition by student order by event_date) as next_year
    from semantic.events_student
    group by student,  event_date)

    select student::int as entity_id, event_date, grado_codes, passed, final_bach_year, next_year, case
      when event_date = to_date('2018-01-01', 'YYYY-MM-DD')
      then 1
      when next_year = event_date + interval '{label_timespan}'  -- If a student is present the next year, they did not drop out
      then 0
      when final_bach_year <= any(grado_codes) and 'passed' = any(passed)  -- If they reached the final year of bachillerato and they passed, they did not drop out
      then 0
      else 1 end as outcome
      from partitioned
      where length(student) > 3 and length(student) < 9 and event_date = '{as_of_date}'::date

  name: 'dropout'


feature_aggregations:
    -
      prefix: 'overage'
      from_obj: |
        (with tmp as (select event_date - birth_date as age, student::int as entity_id, * from semantic.events_student where length(student) > 3 and length(student) < 9),
        overage as (select age - avg(age) over (PARTITION by grado_code) as ovg, entity_id, event_date, grado_code from tmp)
        select entity_id, ovg, case when ovg > 2*stddev(ovg) over (PARTITION by grado_code) then 1 else 0 end as ovg_bool, event_date from overage) as ovgdata

      knowledge_date_column: 'event_date'

      aggregates_imputation:
        all:
            type: 'mean'

      aggregates:

        - # raw overage
          quantity:
            total: "ovg"
          metrics:
            - 'avg'
            - 'max'
            - 'sum'

        - # overage_boolean
          quantity:
            overage_bool: "ovg_bool"
          metrics:
            - 'avg'
            - 'max'
            - 'sum'

      intervals: ['1y', '3y', '5y', 'all']

      groups:
        - 'entity_id'


feature_group_definition:
  prefix: ['overage']

feature_group_strategies: ['all']

grid_config:
    'sklearn.dummy.DummyClassifier':
        strategy: [most_frequent]

scoring:
   testing_metric_groups:
     -
       metrics: ['precision@', 'recall@']
       thresholds:
          percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
          top_n: [1, 5, 10, 35, 50, 300, 500, 1000, 5000, 10000, 25000]

   training_metric_groups:
     -
       metrics: [accuracy]
     -
       metrics: ['precision@', 'recall@']
       thresholds:
          percentiles: [1.0, 5.0, 10.0, 25.0, 50.0, 75.0, 100.0]
          top_n: [1, 5, 10, 25, 50, 100, 150, 300, 500, 1000, 1500]
