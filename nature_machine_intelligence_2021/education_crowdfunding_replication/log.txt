[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_[Kccrowdfunding_replication[00m$ pythno[K[Kon screen_script.py
screen_script.py:62: SADeprecationWarning: Calling URL() directly is deprecated and will be disabled in a future release.  The public constructor for URL is now the URL.create() method.
  dburl = sqlalchemy.engine.url.URL(
[('2011-03-01', '2011-03-01'), ('2011-03-01', '2011-07-01')]
/home/dhananja/.pyenv/versions/3.8.1/lib/python3.8/site-packages/dateparser/date_parser.py:35: PytzUsageWarning: The localize method is no longer necessary, as this time zone supports the fold attribute (PEP 495). For more details on migrating to a PEP 495-compliant implementation, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html
  date_obj = stz.localize(date_obj)
[('2011-05-01', '2011-05-01'), ('2011-05-01', '2011-09-01')]
[('2011-07-01', '2011-07-01'), ('2011-07-01', '2011-11-01')]
[('2011-09-01', '2011-09-01'), ('2011-09-01', '2012-01-01')]
[('2011-11-01', '2011-11-01'), ('2011-11-01', '2012-03-01')]
[('2012-01-01', '2012-01-01'), ('2012-01-01', '2012-05-01')]
[('2012-03-01', '2012-03-01'), ('2012-03-01', '2012-07-01')]
[('2012-05-01', '2012-05-01'), ('2012-05-01', '2012-09-01')]
[('2012-07-01', '2012-07-01'), ('2012-07-01', '2012-11-01')]
[('2012-09-01', '2012-09-01'), ('2012-09-01', '2013-01-01')]
[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ [01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_[Kccrowdfunding_replication[00m$ python screen_script.py[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kcat screen_script.py
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf

import os
import yaml
import sqlalchemy


from itertools import permutations
from jinja2 import Template
import dateparser


from ohio.ext.numpy import pg_copy_to_table

def validate_dates(params):
    for past, future in params['date_pairs']:
        if dateparser.parse(past) > dateparser.parse(future):
            raise ValueError('Error! Cannot validate on the past. %s should be no earlier than %s.' % (future, past))
            
def create_entity_demos(engine, params, entity_demos):
    sql_file = ENTITY_DEMO_FILES[entity_demos]['sql_tmpl']
    sql = Template(open(sql_file, 'r').read()).render(params)
    self.engine.execute(sql)
    self.engine.execute("COMMIT")

    # consistency check:
    check_sql = ENTITY_DEMO_FILES[entity_demos]['check_sql']
    if not engine.execute(check_sql).fetchall()[0][0]:
        raise RuntimeError('Entity Demos failed consistency check:\n %s' % check_sql)

    return '%s.entity_demos' % params['schema']

def get_weight_case_str(date_weights):
    if len(date_weights) == 0:
        return "0"
    s = "CASE"
    for future_train_end_time in date_weights:
        for train_end_time in date_weights[future_train_end_time]:
            if train_end_time == "past_train_end_time":
                pass
            else:
                w = date_weights[future_train_end_time][train_end_time]
                s += f" WHEN future_train_end_time = '{future_train_end_time}' AND train_end_time = '{train_end_time}' THEN {w} "
    s += "ELSE 0 END"
    return s


def get_weight_past_train_end_time_case_str(date_weights):
    if len(date_weights) == 0:
        return f"'date_list[0]'::TIMESTAMP"
    s = "CASE"
    for future_train_end_time in date_weights:
        past_train_end_time = date_weights[future_train_end_time]["past_train_end_time"]
        s += f" WHEN future_train_end_time = '{future_train_end_time}' THEN '{past_train_end_time}'::TIMESTAMP"
    s += f" ELSE '{date_list[0]}'::TIMESTAMP END"
    return s


def weighted_process(weights=[0.99, 0.01], save_name=None):
    date_pairs_all = [
     ('2011-03-01', '2011-03-01'),
     ('2011-03-01', '2011-07-01'),

     ('2011-05-01', '2011-05-01'),
     ('2011-05-01', '2011-09-01'),   

     ('2011-07-01', '2011-07-01'),
     ('2011-07-01', '2011-11-01'),

     ('2011-09-01', '2011-09-01'),
     ('2011-09-01', '2012-01-01'),

     ('2011-11-01', '2011-11-01'),
     ('2011-11-01', '2012-03-01'),

     ('2012-01-01', '2012-01-01'),
     ('2012-01-01', '2012-05-01'),

     ('2012-03-01', '2012-03-01'),
     ('2012-03-01', '2012-07-01'),

     ('2012-05-01', '2012-05-01'),
     ('2012-05-01', '2012-09-01'),

     ('2012-07-01', '2012-07-01'),
     ('2012-07-01', '2012-11-01'),

     ('2012-09-01', '2012-09-01'),
     ('2012-09-01', '2013-01-01')]


    date_list = ['2011-03-01', '2011-05-01', '2011-07-01', '2011-09-01', '2011-11-01', '2012-01-01', '2012-03-01', '2012-05-01', '2012-07-01', '2012-09-01', '2012-11-01', '2013-01-01']
    date_weights = {}
    i_lim = len(weights)
    assert i_lim >= 2
    for i, date in enumerate(date_list):
        if i - i_lim <= 0: # Then no space for all weights, We use <= not < for 2 month delay
            date_weights[date] = {date_list[0]: 1.0, "past_train_end_time": date_list[0]}
        else:
            base = i - 2 # No matter what latest time we can use is 2 before current month
            d = {}
            for j in range(weights):
                d[date_list[base - j]] = weights[j]
            d["past_train_end_time"] =  date_list[base] # Should be the most recent date used to compute adjustment
            date_weights[date] = d



    with open('db_profile.yaml') as fd:
        config = yaml.full_load(fd)
        dburl = sqlalchemy.engine.url.URL(
            "postgresql",
            host=config["host"],
            username=config["user"],
            database=config["db"],
            password=config["pass"],
            port=config["port"],
        )
        engine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)



    ENTITY_DEMO_FILES = {
        'joco': {
            'sql_tmpl': 'joco_entity_demos.sql.tmpl',
            'check_sql': """
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VARCHAR)::TIMESTAMP) AS num_match
                    FROM tmp_bias_models
                    JOIN model_metadata.model_groups mg USING(model_group_id)
                )
                SELECT num_match = 1 AS pass_check
                FROM all_matches
            """
            }
    }
    

    engine_donors.execute('TRUNCATE TABLE bias_results.composite_results_plevel;')
    engine_donors.execute('TRUNCATE TABLE bias_results.model_adjustment_results_plevel;')
    engine_donors.execute('TRUNCATE TABLE bias_working.model_adjustment_group_k_plevel;')

    engine_donors.execute('COMMIT;')


    for dp_idx in range(10):
        date_pairs = [ date_pairs_all[2*dp_idx], date_pairs_all[2*dp_idx+1] ]
        print(date_pairs)
        params = {}
        params['pg_role'] = config["user"]
        params['schema'] = 'bias_working'
        experiment_hashes = ['a33cbdb3208b0df5f4286237a6dbcf8f']
        params['experiment_hashes'] = experiment_hashes
        if isinstance(date_pairs[0], str):
            date_pairs = [date_pairs]
        params['date_pairs'] = date_pairs
        params['date_weight_case_str'] = get_weight_case_str(date_weights)
        params['date_weight_past_train_end_time_case_str'] = get_weight_past_train_end_time_case_str(date_weights)
        params['list_sizes'] = [1000]
        params['demo_col'] = 'plevel'
        params['subsample'] = False
        params['bootstrap'] = False
        entity_demos='bias_working.entity_demos'
        engine=engine_donors.connect()
        validate_dates(params)
        if entity_demos.find('.') > -1:
            params['entity_demos'] = entity_demos
        elif entity_demos in ENTITY_DEMO_FILES.keys():
            params['entity_demos'] = create_entity_demos(engine, params, entity_demos)
        else:
            raise ValueError('Error: entity_demos must be either `schema.table_name` OR one of (%s)' % ', '.join(ENTITY_DEMO_FILES.keys()))

        sql = Template(open('recall_adjustment_pre.sql.tmpl', 'r').read()).render(**params)
        engine.execute(sql)
        engine.execute("COMMIT")


        sql = "SELECT %s, COUNT(*) AS num FROM %s GROUP BY 1 ORDER BY 2 DESC" % (params['demo_col'], params['entity_demos'])
        res = engine.execute(sql).fetchall()
        params['demo_values'] = [r[0] for r in res]
        params['demo_permutations'] = list(permutations(params['demo_values'], 2))


        # pre-calculate the results for all models, date pairs
        sql = Template(open('recall_adjustment-verbose.sql.tmpl', 'r').read()).render(**params)
        engine.execute(sql)
        engine.execute("COMMIT")


        engine.close()
        engine_donors.execute("""
            INSERT INTO bias_results.model_adjustment_results_plevel 
            SELECT * FROM bias_working.model_adjustment_results_plevel;
        """)

        engine_donors.execute("""
            INSERT INTO bias_results.composite_results_plevel 
            SELECT * FROM bias_working.composite_results_plevel;
        """)

        engine_donors.execute("""
            INSERT INTO bias_results.model_adjustment_group_k_plevel 
            SELECT * FROM bias_working.model_adjustment_group_k_plevel gkp WHERE (gkp.model_group_id, gkp.train_end_time, gkp.demo_value) NOT IN (SELECT model_group_id, train_end_time, demo_value FROM bias_results.model_adjustment_group_k_plevel)
        """)

        engine_donors.execute("""
            INSERT INTO bias_results.model_multi_adjustment_results_plevel
            SELECT * FROM bias_working.model_multi_adjustment_results_plevel;
        """)

        engine_donors.execute("COMMIT;")
        
    
    if save_name is not None:
        engine_donors.execute(f"DROP TABLE IF EXISTS bias_working.save_res_{save_name}")
        engine_donors.execute(f"CREATE TABLE bias_working.save_res_{save_name} AS SELECT * FROM bias_results.model_adjustment_results_plevel")
        engine_donors.execute("COMMIT;")
        
        
if __name__ == "__main__":
    weighted_process(weights=[0.99, 0.01], save_name="nn_o")
    #weighted_process(weights=[0.01, 0.99], save_name="o_nn")
    #weighted_process(weights=[0.5, 0.5], save_name="hh")
[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ cat screen_script.py[1P[1P[1P screen_script.pyp screen_script.pyy screen_script.pyt screen_script.pyh screen_script.pyo screen_script.pyn screen_script.py
Traceback (most recent call last):
  File "screen_script.py", line 224, in <module>
    weighted_process(weights=[0.99, 0.01], save_name="nn_o")
  File "screen_script.py", line 105, in weighted_process
    for j in range(weights):
TypeError: 'list' object cannot be interpreted as an integer
[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ vim screen_script.py
[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[27m[29m[m[H[2J[?25l[24;1H"screen_script.py" 226L, 8537C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35mimport[m pandas [38;5;130mas[m pd
[35mimport[m numpy [38;5;130mas[m np
[35mimport[m statsmodels.api [38;5;130mas[m sm
[35mimport[m statsmodels.formula.api [38;5;130mas[m smf

[35mimport[m os
[35mimport[m yaml
[35mimport[m sqlalchemy


[35mfrom[m itertools [35mimport[m permutations
[35mfrom[m jinja2 [35mimport[m Template
[35mimport[m dateparser


[35mfrom[m ohio.ext.numpy [35mimport[m pg_copy_to_table

[38;5;130mdef[m [36mvalidate_dates[m(params):
    [38;5;130mfor[m past, future [38;5;130min[m params[[31m'date_pairs'[m]:[20;9H[38;5;130mif[m dateparser.parse(past) > dateparser.parse(future):[21;13H[38;5;130mraise[m [32mValueError[m([31m'Error! Cannot validate on the past. %s should be nn[22;1Ho earlier than %s.'[m % (future, past))[24;63H18,27[9CTop[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[38;5;130mdef[m [36mcreate_entity_demos[m(engine, params, entity_demos):[24;1H[K[24;63H19,27[10C0%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hsql_file = ENTITY_DEMO_FILES[entity_demos][[31m'sql_tmpl'[m][24;63H[K[24;63H20,27[10C0%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;5Hsql = Template([36mopen[m(sql_file, [31m'r'[m).read()).render(params)
    self.engine.execute(sql)[24;63H[K[24;63H21,27[10C1%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hself.engine.execute([31m"COMMIT"[m)[24;63H[K[24;63H22,12[10C2%[18;12H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H23,27[10C2%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# consistency check:[m[24;63H[K[24;63H24,27[10C3%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [18;27H[1;23r[23;1H
[1;24r[23;5Hcheck_sql = ENTITY_DEMO_FILES[entity_demos][[31m'check_sql'[m][24;63H[K[24;63H25,27[10C3%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[38;5;130mif[m [38;5;130mnot[m engine.execute(check_sql).fetchall()[[31m0[m][[31m0[m]:[24;63H[K[24;63H26,27[10C4%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9H[38;5;130mraise[m [32mRuntimeError[m([31m'Entity Demos failed consistency check:[m[35m\n[m[31m %s'[m % checkk[23;1H_sql)[24;63H[K[24;63H27,27[10C5%[17;27H[?25h[?25l[24;64H8,0-1[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H29,24[10C5%[18;24H[?25h[?25l[24;53H~@k[18;24H[24;53H   [18;27H[1;23r[23;1H
[1;24r[23;5H[38;5;130mreturn[m [31m'%s.entity_demos'[m % params[[31m'schema'[m][24;63H[K[24;63H30,27[10C6%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H31,27[10C6%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[17;27H[106m([m[52Ckk[18;1H_sql[106m)[m[22;1H[38;5;130mdef[m [36mget_weight_case_str[m(date_weights):
    [38;5;130mif[m [36mlen[m(date_weights) == [31m0[m:[24;63H[K[24;63H32,27[10C7%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;1H[1;23r[23;1H
[1;24r[16;27H([52Ckk[17;1H_sql)[23;9H[38;5;130mreturn[m [31m"0"[m[24;63H[K[24;63H33,0-1[9C8%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hs = [31m"CASE"[m[24;63H[K[24;63H34,27[10C8%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[38;5;130mfor[m future_train_end_time [38;5;130min[m date_weights:[24;63H[K[24;63H35,0-1[9C9%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;9H[38;5;130mfor[m train_end_time [38;5;130min[m date_weights[future_train_end_time]:[24;63H[K[24;63H36,27[10C9%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;13H[38;5;130mif[m train_end_time == [31m"past_train_end_time"[m:[23;17H[38;5;130mpass[m[24;63H[K[24;63H37,27[9C10%[17;27H[?25h[?25l[24;64H8,18[18;18H[?25h[?25l[24;53H~@k[18;18H[24;53H   [18;14H[1;23r[23;1H
[1;24r[23;13H[38;5;130melse[m:[24;63H[K[24;63H39,14[9C10%[18;14H[?25h[?25l[1;23r[23;1H
[1;24r[23;17Hw = date_weights[future_train_end_time][train_end_time][24;63H[K[24;63H40,27[9C11%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;17Hs += f[31m" WHEN future_train_end_time = '{future_train_end_time}' AA[23;1HND train_end_time = '{train_end_time}' THEN {w} "[m[24;63H[K[24;63H41,27[9C12%[17;27H[?25h[?25l[24;64H2[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hs += [31m"ELSE 0 END"[m[24;63H[K[24;63H43,20[9C12%[18;20H[?25h[?25l[24;53H~@k[18;20H[24;53H   [18;17H[1;23r[23;1H
[1;24r[23;5H[38;5;130mreturn[m s[24;63H[K[24;63H44,17[9C13%[18;17H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H45,27[9C13%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[23;1H[38;5;130mdef[m [36mget_weight_past_train_end_time_case_str[m(date_weights):[24;63H[K[24;63H46,27[9C14%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;21H[1;23r[23;1H
[1;24r[23;5H[38;5;130mif[m [36mlen[m(date_weights) == [31m0[m:[24;63H[K[24;63H47,21[9C15%[18;21H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9H[38;5;130mreturn[m f[31m"'date_list[0]'::TIMESTAMP"[m
    s = [31m"CASE"[m[24;63H[K[24;63H48,12[9C15%[17;12H[?25h[?25l[24;64H9,0-1[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[38;5;130mfor[m future_train_end_time [38;5;130min[m date_weights:[24;63H[K[24;63H50,0-1[8C16%[18;1H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9Hpast_train_end_time = date_weights[future_train_end_time][[31m"past_train_enn[23;1Hd_time"[m][24;63H[K[24;63H51,27[9C17%[17;27H[?25h[?25l[24;64H2[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;9Hs += f[31m" WHEN future_train_end_time = '{future_train_end_time}' THEN '{paa[23;1Hst_train_end_time}'::TIMESTAMP"[m[24;63H[K[24;63H53,27[9C17%[17;27H[?25h[?25l[24;64H4,14[18;14H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hs += f[31m" ELSE '{date_list[0]}'::TIMESTAMP END"[m[24;63H[K[24;63H55,27[9C18%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;5H[38;5;130mreturn[m s[24;63H[K[24;63H56,27[9C19%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[23;1H[38;5;130mdef[m [36mweighted_process[m(weights=[[31m0.99[m, [31m0.01[m], save_name=[36mNone[m):[24;63H[K[24;63H57,27[9C20%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hdate_pairs_all = [[24;63H[K[24;63H58,27[9C20%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-03-01'[m, [31m'2011-03-01'[m),[24;63H[K[24;63H59,12[9C21%[18;12H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-03-01'[m, [31m'2011-07-01'[m),[24;63H[K[24;63H60,0-1[8C21%[18;1H[?25h[?25l[1;23r[1;1H[2M[1;24r[23;6H([31m'2011-05-01'[m, [31m'2011-05-01'[m),[24;63H[K[24;63H61,0-1[8C22%[17;1H[?25h[?25l[24;53H~@k[17;1H[24;53H   [18;27H[24;64H2,27 [18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-05-01'[m, [31m'2011-09-01'[m),[24;63H[K[24;63H63,22[9C22%[18;22H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H64,27[9C23%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-07-01'[m, [31m'2011-07-01'[m),[24;63H[K[24;63H65,27[9C23%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-07-01'[m, [31m'2011-11-01'[m),[24;63H[K[24;63H66,0-1[8C24%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H67,27[9C24%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-09-01'[m, [31m'2011-09-01'[m),[24;63H[K[24;63H68,27[9C25%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-09-01'[m, [31m'2012-01-01'[m),[24;63H[K[24;63H69,0-1[8C25%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H70,27[9C26%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2011-11-01'[m, [31m'2011-11-01'[m),[24;63H[K[24;63H71,27[9C26%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;6H([31m'2011-11-01'[m, [31m'2012-03-01'[m),[24;63H[K[24;63H72,0-1[8C27%[17;1H[?25h[?25l[24;64H3,27 [18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;6H([31m'2012-01-01'[m, [31m'2012-01-01'[m),[23;6H([31m'2012-01-01'[m, [31m'2012-05-01'[m),[24;63H[K[24;63H74,27[9C28%[17;27H[?25h[?25l[24;64H5,0-1[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H76,27[9C28%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-03-01'[m, [31m'2012-03-01'[m),[24;63H[K[24;63H77,27[9C29%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-03-01'[m, [31m'2012-07-01'[m),[24;63H[K[24;63H78,0-1[8C29%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H79,27[9C30%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-05-01'[m, [31m'2012-05-01'[m),[24;63H[K[24;63H80,27[9C30%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-05-01'[m, [31m'2012-09-01'[m),[24;63H[K[24;63H81,0-1[8C31%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H82,27[9C31%[18;27H[?25h[?25l[24;53H^[[18;27H[24;53H  [18;27H[1;23r[23;1H
[1;24r[23;6H([31m'2012-07-01'[m, [31m'2012-07-01'[m),[24;63H[K[24;63H83,27[9C32%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-07-01'[m, [31m'2012-11-01'[m),[24;63H[K[24;63H84,0-1[8C32%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H85,27[9C33%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-09-01'[m, [31m'2012-09-01'[m),[24;63H[K[24;63H86,27[9C33%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;6H([31m'2012-09-01'[m, [31m'2013-01-01'[m)][24;63H[K[24;63H87,0-1[8C33%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H88,27[9C34%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H89,27[9C34%[18;27H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11[22;1H1-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'200[23;1H12-11-01'[m, [31m'2013-01-01'[m][24;63H[K[24;63H90,0-1[8C36%[16;1H[?25h[?25l[24;53H~@k[16;1H[24;53H   [17;27H[24;64H1,27 [17;27H[?25h[?25l[24;64H2[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hdate_weights = {}[24;63H[K[24;63H93,0-1[8C36%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hi_lim = [36mlen[m(weights)[24;63H[K[24;63H94,0-1[8C37%[18;1H[?25h[?25l[1;23r[1;1H[4M[1;24r[20;5H[38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[22;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for  [23;1H2 month delay[m[24;63H[K[24;63H95,27[9C38%[15;27H[?25h[?25l[18;20H[106m{}[m[24;64H6,21[18;21H[?25h[?25l[1;23r[1;1H[2M[1;24r[16;20H{}[17;16H[106m([7C)[m[22;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: datee[23;1H_list[[31m0[m]}[24;63H[K[24;63H97,24[9C39%[17;24H[?25h[?25l[24;53H~@k[17;24H[24;53H   [18;21H[17;16H([7C)[24;64H8,21[18;21H[?25h[?25l[1;23r[23;1H
[1;24r[23;9H[38;5;130melse[m:[24;63H[K[24;63H99,27[9C40%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before curr[23;1Hrent month[m[24;63H[K[24;63H100,27[8C40%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;13Hd = {}[23;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m(weights):[24;63H[K[24;63H101,27[8C41%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;17Hd[date_list[base - j]] = weights[j][24;63H[K[24;63H102,13[8C42%[18;13H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recc[23;1Hent date used to compute adjustment[m[24;63H[K[24;63H103,27[8C43%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[18;17H[106m{}[m[23;13Hdate_weights[date] = d[24;63H[K[24;63H104,18[8C43%[18;18H[?25h[?25l[1;23r[23;1H
[1;24r[17;17H{}[18;27H[106m([7C)[m[24;63H[K[24;63H105,27[8C44%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[17;27H([7C)[24;63H[K[24;63H106,27[8C44%[18;27H[?25h[?25l[1;23r[1;1H[4M[1;24r[21;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[22;9Hconfig = yaml.full_load(fd)[23;9Hdburl = sqlalchemy.engine.url.URL([24;63H[K[24;63H107,27[8C45%[15;27H[?25h[?25l[24;65H8[17;27H[?25h[?25l[24;65H9,0-1[18;1H[?25h[?25l[24;53H~@k[18;1H[24;53H   [18;1H[1;23r[23;1H
[1;24r[23;13H[31m"postgresql"[m,[24;63H[K[24;63H110,0-1[7C46%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;13Hhost=config[[31m"host"[m],[24;63H[K[24;63H111,0-1[7C46%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;13Husername=config[[31m"user"[m],[24;63H[K[24;63H112,27[8C47%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;13Hdatabase=config[[31m"db"[m],[24;63H[K[24;63H113,27[8C47%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;13Hpassword=config[[31m"pass"[m],[23;13Hport=config[[31m"port"[m],[24;63H[K[24;63H114,27[8C48%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;25H[24;65H5,25[18;25H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9H)[23;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.poo[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H116,27[8C49%[17;27H[?25h[?25l[24;65H7[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[22;1H        engine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pooo[23;1Hl.QueuePool)[24;63H[K[24;63H118,27[8C49%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[24;63H[K[24;63H119,27[8C50%[17;27H[?25h[?25l[24;64H20[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[11;42H[106m([18;9H)[m[24;63H[K[24;63H121,9[9C50%[18;9H[?25h[?25l[24;53H~@k[18;9H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[9;42H([16;9H)[22;5HENTITY_DEMO_FILES = {[23;9H[31m'joco'[m: {[24;63H[K[24;63H122,27[8C51%[17;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[23;13H[31m'check_sql'[m: [31m"""[m[24;63H[K[24;63H123,0-1[7C52%[17;1H[?25h[?25l[24;65H4[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[31m                WITH all_matches AS ([m[24;63H[K[24;63H125,0-1[7C52%[18;1H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;1H[31m                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VV[23;1HARCHAR)::TIMESTAMP) AS num_match[m[24;63H[K[24;63H126,25[8C53%[17;25H[?25h[?25l[24;65H7,17[18;17H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[31m                    FROM tmp_bias_models[m[24;63H[K[24;63H128,27[8C54%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [18;27H[1;23r[23;1H
[1;24r[23;1H[31m                    JOIN model_metadata.model_groups mg USING(model_group_id)[m[24;63H[K[24;63H129,27[8C54%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[31m                )[m[24;63H[K[24;63H130,27[8C55%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;1H[31m                SELECT num_match = 1 AS pass_check
                FROM all_matches[m[24;63H[K[24;63H131,27[8C56%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[31m            """[m[24;63H[K[24;63H132,27[8C56%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;13H}[24;63H[K[24;63H133,27[8C57%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;5H}[24;63H[K[24;63H134,17[8C57%[18;17H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H135,27[8C58%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [18;27H[1;23r[23;1H
[1;24r[24;63H[K[24;63H136,27[8C58%[18;27H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hengine_donors.execute([31m'TRUNCATE TABLE bias_results.composite_results_plevel;;[22;1H'[m)
    engine_donors.execute([31m'TRUNCATE TABLE bias_results.model_adjustment_results_[m[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H137,15[8C59%[16;15H[?25h[?25l[5;17H[106m{[17;13H}[m[24;65H8,13[17;13H[?25h[?25l[4;25H[106m{[m[5;17H{[17;13H}
    [106m}[m[24;65H9,5 [18;5H[?25h[?25l[1;23r[23;1H
[1;24r[3;25H{[17;5H}[22;1H    engine_donors.execute([31m'TRUNCATE TABLE bias_results.model_adjustment_results__[23;1Hplevel;'[m)[24;63H[K[24;63H140,4[9C59%[18;4H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;5Hengine_donors.execute([31m'TRUNCATE TABLE bias_working.model_adjustment_group_k__[23;1Hplevel;'[m)[24;63H[K[24;63H141,0-1[7C60%[17;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H142,27[8C60%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;5Hengine_donors.execute([31m'COMMIT;'[m)[24;63H[K[24;63H143,27[8C61%[17;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[23;5H[38;5;130mfor[m dp_idx [38;5;130min[m [36mrange[m([31m10[m):[24;63H[K[24;63H144,27[8C62%[17;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9Hdate_pairs = [ date_pairs_all[[31m2[m*dp_idx], date_pairs_all[[31m2[m*dp_idx+[31m1[m] ][23;9H[36mprint[m(date_pairs)[24;63H[K[24;63H145,0-1[7C63%[17;1H[?25h[?25l[24;65H6,27 [18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hparams = {}[24;63H[K[24;63H147,0-1[7C64%[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hparams[[31m'pg_role'[m] = config[[31m"user"[m][24;63H[K[24;63H148,0-1[7C64%[18;1H[?25h[?25l[24;53H~@k[18;1H[24;53H   [18;27H[1;23r[23;1H
[1;24r[18;24H[106m([2C)[m[23;9Hparams[[31m'schema'[m] = [31m'bias_working'[m[24;63H[K[24;63H149,27[8C65%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[17;24H([2C)[23;9Hexperiment_hashes = [[31m'a33cbdb3208b0df5f4286237a6dbcf8f'[m][24;63H[K[24;63H150,27[8C65%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[18;14H[106m([10C)[m[23;9Hparams[[31m'experiment_hashes'[m] = experiment_hashes[24;63H[K[24;63H151,25[8C66%[18;25H[?25h[?25l[1;23r[23;1H
[1;24r[17;14H([10C)[18;18H[106m{}[m[23;9H[38;5;130mif[m [36misinstance[m(date_pairs[[31m0[m], [36mstr[m):[24;63H[K[24;63H152,19[8C66%[18;19H[?25h[?25l[1;23r[23;1H
[1;24r[17;18H{}[23;13Hdate_pairs = [date_pairs][24;63H[K[24;63H153,27[8C66%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hparams[[31m'date_pairs'[m] = date_pairs[24;63H[K[24;63H154,27[8C67%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hparams[[31m'date_weight_case_str'[m] = get_weight_case_str(date_weights)[24;63H[K[24;63H155,27[8C67%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [16;27H[1;23r[1;1H[3M[1;24r[21;9Hparams[[31m'date_weight_past_train_end_time_case_str'[m] = get_weight_past_traa[22;1Hin_end_time_case_str(date_weights)[23;9Hparams[[31m'list_sizes'[m] = [[31m1000[m][24;63H[K[24;63H156,27[8C68%[16;27H[?25h[?25l[24;65H7[17;27H[?25h[?25l[24;65H8[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9Hparams[[31m'demo_col'[m] = [31m'plevel'[m[23;9Hparams[[31m'subsample'[m] = [36mFalse[m[24;63H[K[24;63H159,27[8C69%[17;27H[?25h[?25l[24;64H60[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;9Hparams[[31m'bootstrap'[m] = [36mFalse[m[23;9Hentity_demos=[31m'bias_working.entity_demos'[m[24;63H[K[24;63H161,27[8C70%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hengine=engine_donors.connect()[24;63H[K[24;63H162,27[8C71%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hvalidate_dates(params)[24;63H[K[24;63H163,27[8C71%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[18;15H[106m[[11C][m[23;9H[38;5;130mif[m entity_demos.find([31m'.'[m) > -[31m1[m:[24;63H[K[24;63H164,27[8C72%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[17;15H[[11C][18;15H[106m[[11C][m[23;13Hparams[[31m'entity_demos'[m] = entity_demos[24;63H[K[24;63H165,27[8C72%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[17;15H[[11C][23;9H[38;5;130melif[m entity_demos [38;5;130min[m ENTITY_DEMO_FILES.keys():[24;63H[K[24;63H166,27[8C73%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;13Hparams[[31m'entity_demos'[m] = create_entity_demos(engine, params, entity__[23;1Hdemos)[24;63H[K[24;63H167,27[8C73%[17;27H[?25h[?25l[24;65H8[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9H[38;5;130melse[m:[24;63H[K[24;63H169,27[8C74%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;13H[38;5;130mraise[m [32mValueError[m([31m'Error: entity_demos must be either `schema.table_nn[23;1Hame` OR one of (%s)'[m % [31m', '[m.join(ENTITY_DEMO_FILES.keys()))[24;63H[K[24;63H170,27[8C74%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;27H[24;65H1[18;27H[?25h[?25l[1;23r[1;1H[3M[1;24r[22;9Hsql = Template([36mopen[m([31m'recall_adjustment_pre.sql.tmpl'[m, [31m'r'[m).read()).rendee[23;1Hr(**params)[24;63H[K[24;63H172,27[8C75%[16;27H[?25h[?25l[24;65H3,13[18;13H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9Hengine.execute(sql)[23;9Hengine.execute([31m"COMMIT"[m)[24;63H[K[24;63H174,27[8C76%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H175,0-1[7C77%[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[22;9Hsql = [31m"SELECT %s, COUNT(*) AS num FROM %s GROUP BY 1 ORDER BY 2 DESC"[m %  [23;1H(params[[31m'demo_col'[m], params[[31m'entity_demos'[m])[24;63H[K[24;63H176,27[8C78%[16;27H[?25h[?25l[24;53H~@k[16;27H[24;53H   [18;27H[106m([msql[106m)[m[24;65H7[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[17;23H(sql)[23;9Hres = engine.execute(sql).fetchall()[24;63H[K[24;63H178,27[8C78%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [18;1H[1;23r[23;1H
[1;24r[23;9Hparams[[31m'demo_values'[m] = [r[[31m0[m] [38;5;130mfor[m r [38;5;130min[m res][24;63H[K[24;63H179,0-1[7C79%[18;1H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9Hparams[[31m'demo_permutations'[m] = [36mlist[m(permutations(params[[31m'demo_values'[m], [31m22[m[23;1H))[24;63H[K[24;63H180,0-1[7C79%[17;1H[?25h[?25l[24;53H~@k[17;1H[24;53H   [17;27H[1;23r[23;1H
[1;24r[24;63H[K[24;63H181,27[8C80%[17;27H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H182,27[8C80%[18;27H[?25h[?25l[1;23r[23;1H
[1;24r[23;9H[34m# pre-calculate the results for all models, date pairs[m[24;63H[K[24;63H183,27[8C81%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[22;9Hsql = Template([36mopen[m([31m'recall_adjustment-verbose.sql.tmpl'[m, [31m'r'[m).read()).rr[23;1Hender(**params)[24;63H[K[24;63H184,27[8C81%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [17;1H[1;23r[1;1H[2M[1;24r[22;9Hengine.execute(sql)[23;9Hengine.execute([31m"COMMIT"[m)[24;63H[K[24;63H185,0-1[7C82%[17;1H[?25h[?25l[24;53H~@k[17;1H[24;53H   [18;1H[24;65H6[18;1H[?25h[?25l[1;23r[23;1H
[1;24r[24;63H[K[24;63H187,27[8C83%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[23;9Hengine.close()[24;63H[K[24;63H188,27[8C84%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;27H[1;23r[23;1H
[1;24r[18;23H[106m([msql[106m)[m[23;9Hengine_donors.execute([31m"""[m[24;63H[K[24;63H189,27[8C84%[18;27H[?25h[?25l[1;23r[1;1H[2M[1;24r[16;23H(sql)[22;1H[31m            INSERT INTO bias_results.model_adjustment_results_plevel 
            SELECT * FROM bias_working.model_adjustment_results_plevel;[m[24;63H[K[24;63H190,27[8C85%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;1H[24;65H1,0-1[18;1H[?25h[?25l[24;53H~@k[18;1H[24;53H   [18;1H[1;23r[23;1H
[1;24r[23;1H[31m        """[m)[24;63H[K[24;63H192,0-1[7C85%[18;1H[?25h[?25l[24;53H~@k[18;1H[24;53H   [18;22H[1;23r[23;1H
[1;24r[18;21H[106m()[m[24;63H[K[24;63H193,22[8C86%[18;22H[?25h[?25l[24;53H~@k[18;22H[24;53H   [18;27H[1;23r[23;1H
[1;24r[17;21H()[23;9Hengine_donors.execute([31m"""[m[24;63H[K[24;63H194,27[8C86%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [18;27H[1;23r[23;1H
[1;24r[23;1H[31m            INSERT INTO bias_results.composite_results_plevel [m[24;63H[K[24;63H195,27[8C87%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;1H[31m            SELECT * FROM bias_working.composite_results_plevel;
        """[m)[24;63H[K[24;63H196,27[8C88%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;12H[15;30H[106m([18;12H)[m[24;65H7,12[18;12H[?25h[?25l[24;53H~@k[18;12H[24;53H   [17;27H[15;30H([18;12H)[24;65H6,27[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [16;27H[24;65H5[16;27H[?25h[?25l[24;53H~@k[16;27H[24;53H   [15;27H[24;65H4[15;27H[?25h[?25l[24;53H~@k[15;27H[24;53H   [14;22H[106m()[m[24;65H3,22[14;22H[?25h[?25l[24;53H~@k[14;22H[24;53H   [13;1H[14;21H()[24;65H2,0-1[13;1H[?25h[?25l[24;53H~@k[13;1H[24;53H   [12;1H[24;65H1[12;1H[?25h[?25l[24;53H~@k[12;1H[24;53H   [11;27H[24;65H0,27 [11;27H[?25h[?25l[24;53H~@k[11;27H[24;53H   [10;27H[106m([msql[106m)[m[24;64H89[10;27H[?25h[?25l[24;53H~@k[10;27H[24;53H   [8;27H[10;23H(sql)[24;65H8[8;27H[?25h[?25l[24;53H~@k[8;27H[24;53H   [7;27H[24;65H7[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;1H[24;65H6,0-1[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [7;1H[1;23r[1;1H[2L[1;24r[1;9Hsql = [31m"SELECT %s, COUNT(*) AS num FROM %s GROUP BY 1 ORDER BY 2 DESC"[m %  [2;1H(params[[31m'demo_col'[m], params[[31m'entity_demos'[m])[24;63H[K[24;63H185,0-1[7C87%[7;1H[?25h[?25l[24;53H~@k[7;1H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H184,27[8C86%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H183,27[8C86%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[1;9Hengine.execute([31m"COMMIT"[m)[24;63H[K[24;63H182,27[8C85%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;27H[1;23r[1;1H[3L[1;24r[1;9Hsql = Template([36mopen[m([31m'recall_adjustment_pre.sql.tmpl'[m, [31m'r'[m).read()).rendee[2;1Hr(**params)[3;9Hengine.execute(sql)[24;63H[K[24;63H181,27[8C84%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;1H[24;65H0,0-1[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H179,0-1[7C84%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [7;27H[1;23r[1;1H[2L[1;24r[1;13H[38;5;130mraise[m [32mValueError[m([31m'Error: entity_demos must be either `schema.table_nn[2;1Hame` OR one of (%s)'[m % [31m', '[m.join(ENTITY_DEMO_FILES.keys()))[24;63H[K[24;63H178,27[8C83%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;27H[106m([msql[106m)[m[24;65H7[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;27H[1;23r[1;1H[3L[1;24r[1;13Hparams[[31m'entity_demos'[m] = create_entity_demos(engine, params, entity__[2;1Hdemos)[3;9H[38;5;130melse[m:[9;23H(sql)[24;63H[K[24;63H176,27[8C81%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;1H[24;65H5,0-1[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;13Hparams[[31m'entity_demos'[m] = entity_demos[2;9H[38;5;130melif[m entity_demos [38;5;130min[m ENTITY_DEMO_FILES.keys():[24;63H[K[24;63H174,27[8C81%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[1;9H[38;5;130mif[m entity_demos.find([31m'.'[m) > -[31m1[m:[24;63H[K[24;63H173,13[8C80%[6;13H[?25h[?25l[24;53H~@k[6;13H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;9Hengine=engine_donors.connect()[2;9Hvalidate_dates(params)[24;63H[K[24;63H172,27[8C79%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hentity_demos=[31m'bias_working.entity_demos'[m[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H171,27[8C79%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'bootstrap'[m] = [36mFalse[m[24;63H[K[24;63H170,27[8C79%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'subsample'[m] = [36mFalse[m[24;63H[K[24;63H169,27[8C78%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'demo_col'[m] = [31m'plevel'[m[24;63H[K[24;63H168,27[8C78%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'list_sizes'[m] = [[31m1000[m][23;1H[94m@@@                                                                             [m[24;63H[K[24;63H167,27[8C77%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;27H[1;23r[1;1H[2L[1;24r[1;9Hparams[[31m'date_weight_past_train_end_time_case_str'[m] = get_weight_past_traa[2;1Hin_end_time_case_str(date_weights)[24;63H[K[24;63H166,27[8C77%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;27H[6;15H[106m[[11C][m[24;65H5[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'date_weight_case_str'[m] = get_weight_case_str(date_weights)[6;15H[106m[[11C][m[7;15H[[11C][24;63H[K[24;63H164,27[8C76%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'date_pairs'[m] = date_pairs[7;15H[[11C][24;63H[K[24;63H163,27[8C76%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;13Hdate_pairs = [date_pairs][24;63H[K[24;63H162,27[8C75%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;9Hparams[[31m'experiment_hashes'[m] = experiment_hashes[2;9H[38;5;130mif[m [36misinstance[m(date_pairs[[31m0[m], [36mstr[m):[24;63H[K[24;63H161,27[8C75%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hexperiment_hashes = [[31m'a33cbdb3208b0df5f4286237a6dbcf8f'[m][24;63H[K[24;63H160,27[8C74%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'schema'[m] = [31m'bias_working'[m[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H159,27[8C74%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams[[31m'pg_role'[m] = config[[31m"user"[m][24;63H[K[24;63H158,27[8C74%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hparams = {}[24;63H[K[24;63H157,27[8C73%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9H[36mprint[m(date_pairs)[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H156,27[8C73%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hdate_pairs = [ date_pairs_all[[31m2[m*dp_idx], date_pairs_all[[31m2[m*dp_idx+[31m1[m] ][24;63H[K[24;63H155,27[8C73%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;5H[38;5;130mfor[m dp_idx [38;5;130min[m [36mrange[m([31m10[m):[24;63H[K[24;63H154,27[8C72%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[24;63H[K[24;63H153,27[8C72%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;19H[1;23r[1;1H[L[1;24r[6;18H[106m{}[m[24;63H[K[24;63H152,19[8C71%[6;19H[?25h[?25l[24;53H~@k[6;19H[24;53H   [6;25H[1;23r[1;1H[L[1;24r[1;5Hengine_donors.execute([31m'COMMIT;'[m)[6;14H[106m([10C)[m[7;18H{}[24;63H[K[24;63H151,25[8C71%[6;25H[?25h[?25l[24;53H~@k[6;25H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[7;14H([10C)[24;63H[K[24;63H150,27[8C70%[6;27H[?25h[?25l[1;23r[1;1H[2L[1;24r[1;5Hengine_donors.execute([31m'TRUNCATE TABLE bias_working.model_adjustment_group_k__[2;1Hplevel;'[m)[7;24H[106m([2C)[m[24;63H[K[24;63H149,27[8C69%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;1H[7;24H([2C)[24;65H8,0-1[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [7;1H[1;23r[1;1H[2L[1;24r[1;5Hengine_donors.execute([31m'TRUNCATE TABLE bias_results.model_adjustment_results__[2;1Hplevel;'[m)[24;63H[K[24;63H147,0-1[7C68%[7;1H[?25h[?25l[24;53H~@k[7;1H[24;53H   [6;27H[24;65H6,27 [6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;1H[1;23r[1;1H[2L[1;24r[1;5Hengine_donors.execute([31m'TRUNCATE TABLE bias_results.composite_results_plevel;;[2;1H'[m)[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H145,0-1[7C68%[7;1H[?25h[?25l[24;53H~@k[7;1H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H144,27[8C67%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;5H}[24;63H[K[24;63H143,27[8C66%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;1H[31m            """[m[2;13H}[24;63H[K[24;63H142,27[8C66%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[1;1H[31m                FROM all_matches[m[24;63H[K[24;63H141,0-1[7C65%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;4H[1;23r[1;1H[L[1;24r[1;1H[31m                SELECT num_match = 1 AS pass_check[m[24;63H[K[24;63H140,4[9C65%[6;4H[?25h[?25l[24;53H~@k[6;4H[24;53H   [6;5H[1;23r[1;1H[L[1;24r[1;1H[31m                )[m[24;63H[K[24;63H139,5[9C64%[6;5H[?25h[?25l[1;23r[1;1H[L[1;24r[1;1H[31m                    JOIN model_metadata.model_groups mg USING(model_group_id)[m[24;63H[K[24;63H138,13[8C64%[6;13H[?25h[?25l[24;53H~@k[6;13H[24;53H   [6;15H[1;23r[1;1H[L[1;24r[1;1H[31m                    FROM tmp_bias_models[m[24;63H[K[24;63H137,15[8C63%[6;15H[?25h[?25l[24;53H~@k[6;15H[24;53H   [7;27H[1;23r[1;1H[2L[1;24r[1;1H[31m                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VV[2;1HARCHAR)::TIMESTAMP) AS num_match[m[24;63H[K[24;63H136,27[8C62%[7;27H[?25h[?25l[24;65H5[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;17H[1;23r[1;1H[L[1;24r[1;1H[31m                WITH all_matches AS ([m[24;63H[K[24;63H134,17[8C62%[6;17H[?25h[?25l[24;53H~@k[6;17H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;13H[31m'check_sql'[m: [31m"""[m[24;63H[K[24;63H133,27[8C61%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[24;63H[K[24;63H132,27[8C61%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;5HENTITY_DEMO_FILES = {[2;9H[31m'joco'[m: {[24;63H[K[24;63H131,27[8C60%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H130,27[8C59%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[24;63H[K[24;63H129,27[8C59%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H128,27[8C59%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;17H[1;23r[1;1H[2L[1;24r[1;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pooo[2;1Hl.QueuePool)[7;17H[106m{[19;13H}[m[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H127,17[8C58%[7;17H[?25h[?25l[6;25H[106m{[m[7;17H{[19;13H}
    [106m}[m[24;65H6,25[6;25H[?25h[?25l[24;53H~@k[6;25H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;9H)[7;25H{[21;5H}[24;63H[K[24;63H125,0-1[7C58%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;13Hport=config[[31m"port"[m],[24;63H[K[24;63H124,0-1[7C58%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;13Hpassword=config[[31m"pass"[m],[24;63H[K[24;63H123,0-1[7C57%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;13Husername=config[[31m"user"[m],[2;13Hdatabase=config[[31m"db"[m],[24;63H[K[24;63H122,27[8C56%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;9H[1;23r[1;1H[L[1;24r[1;13Hhost=config[[31m"host"[m],[24;63H[K[24;63H121,9[9C56%[6;9H[?25h[?25l[24;53H~@k[6;9H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;13H[31m"postgresql"[m,[24;63H[K[24;63H120,27[8C55%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hdburl = sqlalchemy.engine.url.URL([24;63H[K[24;63H119,27[8C55%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9Hconfig = yaml.full_load(fd)[24;63H[K[24;63H118,27[8C54%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[24;63H[K[24;63H117,27[8C54%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H116,27[8C53%[6;27H[?25h[?25l[1;23r[1;1H[L[1;24r[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H115,25[8C53%[6;25H[?25h[?25l[24;53H~@k[6;25H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H114,27[8C52%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;13Hdate_weights[date] = d[24;63H[K[24;63H113,27[8C52%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;27H[1;23r[1;1H[2L[1;24r[1;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recc[2;1Hent date used to compute adjustment[m[24;63H[K[24;63H112,27[8C51%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;1H[24;65H1,0-1[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;17Hd[date_list[base - j]] = weights[j][24;63H[K[24;63H110,0-1[7C51%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m(weights):[24;63H[K[24;63H109,0-1[7C50%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;13Hd = {}[24;63H[K[24;63H108,27[8C50%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before curr[2;1Hrent month[m[24;63H[K[24;63H107,27[8C49%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;9H[38;5;130melse[m:[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H106,27[8C49%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;27H[1;23r[1;1H[2L[1;24r[1;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: datee[2;1H_list[[31m0[m]}[7;27H[106m([7C)[m[24;63H[K[24;63H105,27[8C48%[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;18H[106m{}[m[7;27H([7C)[24;65H4,18[6;18H[?25h[?25l[24;53H~@k[6;18H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for  [2;1H2 month delay[m[8;17H{}[24;63H[K[24;63H103,27[8C47%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;13H[1;23r[1;1H[L[1;24r[1;5H[38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[24;63H[K[24;63H102,13[8C47%[6;13H[?25h[?25l[24;53H~@k[6;13H[24;53H   [6;27H[1;23r[1;1H[2L[1;24r[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m[24;63H[K[24;63H101,27[8C46%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [8;27H[1;23r[1;1H[4L[1;24r[1;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11[2;1H1-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'200[3;1H12-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}[24;63H[K[24;63H100,27[8C44%[8;27H[?25h[?25l[24;53H~@k[8;27H[24;53H   [7;27H[24;63H99,27 [7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [6;21H[24;64H8,21[6;21H[?25h[?25l[24;53H~@k[6;21H[24;53H   [6;24H[1;23r[1;1H[L[1;24r[6;16H[106m([7C)[m[24;63H[K[24;63H97,24[9C44%[6;24H[?25h[?25l[24;53H~@k[6;24H[24;53H   [6;21H[1;23r[1;1H[L[1;24r[6;20H[106m{}[m[7;16H([7C)[24;63H[K[24;63H96,21[9C44%[6;21H[?25h[?25l[24;53H~@k[6;21H[24;53H   [6;27H[1;23r[1;1H[3L[1;24r[2;6H([31m'2012-09-01'[m, [31m'2012-09-01'[m),[3;6H([31m'2012-09-01'[m, [31m'2013-01-01'[m)][9;20H{}[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H95,27[9C42%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;6H([31m'2012-07-01'[m, [31m'2012-11-01'[m),[24;63H[K[24;63H94,0-1[8C42%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;6H([31m'2012-07-01'[m, [31m'2012-07-01'[m),[24;63H[K[24;63H93,0-1[8C41%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H92,27[9C41%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;6H([31m'2012-05-01'[m, [31m'2012-09-01'[m),[24;63H[K[24;63H91,27[9C40%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;1H[1;23r[1;1H[L[1;24r[1;6H([31m'2012-05-01'[m, [31m'2012-05-01'[m),[23;1H[94m@@@                                                                             [m[24;63H[K[24;63H90,0-1[8C40%[6;1H[?25h[?25l[24;53H~@k[6;1H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[24;63H[K[24;63H89,27[9C40%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [6;27H[1;23r[1;1H[L[1;24r[1;6H([31m'2012-03-01'[m, [31m'2012-07-01'[m),[24;63H[K[24;63H88,27[9C39%[6;27H[?25h[?25l[24;53H~@k[6;27H[24;53H   [7;27H[24;64H9[7;27H[?25h[?25l[24;53H~@k[7;27H[24;53H   [8;1H[24;63H90,0-1[8;1H[?25h[?25l[24;53H~@k[8;1H[24;53H   [9;27H[24;64H1,27 [9;27H[?25h[?25l[24;53H~@k[9;27H[24;53H   [10;27H[24;64H2[10;27H[?25h[?25l[24;53H~@k[10;27H[24;53H   [11;1H[24;64H3,0-1[11;1H[?25h[?25l[24;53H~@k[11;1H[24;53H   [12;1H[24;64H4[12;1H[?25h[?25l[24;53H~@k[12;1H[24;53H   [13;27H[24;64H5,27 [13;27H[?25h[?25l[24;53H~@k[13;27H[24;53H   [16;21H[106m{}[m[24;64H6,21[16;21H[?25h[?25l[24;53H~@k[16;21H[24;53H   [17;24H[16;20H{}[17;16H[106m([7C)[m[24;64H7,24[17;24H[?25h[?25l[24;53H~@k[17;24H[24;53H   [18;21H[17;16H([7C)[24;64H8,21[18;21H[?25h[?25l[24;53H~@k[18;21H[24;53H   [18;27H[1;23r[23;1H
[1;24r[23;9H[38;5;130melse[m:[24;63H[K[24;63H99,27[9C40%[18;27H[?25h[?25l[24;53H~@k[18;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before curr[23;1Hrent month[m[24;63H[K[24;63H100,27[8C40%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;13Hd = {}[23;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m(weights):[24;63H[K[24;63H101,27[8C41%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;13H[1;23r[23;1H
[1;24r[23;17Hd[date_list[base - j]] = weights[j][24;63H[K[24;63H102,13[8C42%[18;13H[?25h[?25l[24;53H~@k[18;13H[24;53H   [17;27H[1;23r[1;1H[2M[1;24r[22;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recc[23;1Hent date used to compute adjustment[m[24;63H[K[24;63H103,27[8C43%[17;27H[?25h[?25l[24;53H~@k[17;27H[24;53H   [18;18H[1;23r[23;1H
[1;24r[18;17H[106m{}[m[23;13Hdate_weights[date] = d[24;63H[K[24;63H104,18[8C43%[18;18H[?25h[?25l[24;53H~@k[18;18H[24;53H   [18;27H[1;23r[23;1H
[1;24r[17;17H{}[18;27H[106m([7C)[m[24;63H[K[24;63H105,27[8C44%[18;27H[?25h[?25l[24;53Hi[18;27H[24;53H [18;27H[24;1H[1m-- INSERT --[m[24;63H[K[24;63H105,27[8C44%[18;27H[?25h[?25l([7C)[24;68H6[18;26H[?25h[?25l[24;68H5[18;25H[?25h[?25l[24;68H4[18;24H[?25h[?25l[24;68H3[18;23H[?25h[?25l[24;68H4[18;24H[?25h[?25l[24;68H5[18;25H[?25h[?25l[24;68H6[18;26H[?25h[?25l[1C[106m([7C)[m[24;68H7[18;27H[?25h[?25l[24;68H8[18;28H[?25h[?25llweight[106ms[m):[18;27H([7Cs[24;68H9[18;29H[?25h[?25leweights):[24;67H30[18;30H[?25h[?25lnweights):[24;68H1[18;31H[?25h[?25l[36mlen[m(weights):[18;31H[106m([7C)[m[24;68H2[18;32H[?25h[?25l([7C)[24;68H3[18;33H[?25h[?25l[24;68H4[18;34H[?25h[?25l[24;68H5[18;35H[?25h[?25l[24;68H6[18;36H[?25h[?25l[24;68H7[18;37H[?25h[?25l[24;68H8[18;38H[?25h[?25l[18;31H[106m([7C)[m[24;68H9[18;39H[?25h[?25l[1C):[18;27H[106m([m[3C([7C)[106m)[m[24;67H40[18;40H[?25h[24;1H[K[18;39H[?25l[24;53H^[[18;39H[24;53H  [18;40H[18;27H([3C[106m([7C)[m)[24;63H105,39[8C44%[18;39H[?25h[?25l[24;53H:[18;39H[24;53H[K[24;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?2004l"screen_script.py" 226L, 8542C written
[?2004l[?1l>[?25h[?1049l[23;0;0t[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ gits [K[K status
On branch dj_time_robustness
Your branch is up to date with 'origin/dj_time_robustness'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mmodified:   education_crowdfunding_replication.ipynb[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   education_crowdfunding_replication.ipynb[m
	[31mmodified:   log.txt[m
	[31mmodified:   recall_adjustment-verbose.sql.tmpl[m
	[31mmodified:   screen_script.py[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[31m../../log.txt[m

[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ ls
README.md                                 recall_adjustment-verbose.sql.tmpl
RecallAdjuster.py                         recall_adjustment.sql.tmpl
db_profile.yaml                           recall_adjustment_pre.sql.tmpl
db_profile_template.txt                   requirements.txt
education_crowdfunding_replication.ipynb  screen_script.py
log.txt
[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ lsgit statusvim screen_script.py[3@python[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
screen_script.py:114: SADeprecationWarning: Calling URL() directly is deprecated and will be disabled in a future release.  The public constructor for URL is now the URL.create() method.
  dburl = sqlalchemy.engine.url.URL(
[('2011-03-01', '2011-03-01'), ('2011-03-01', '2011-07-01')]
Traceback (most recent call last):
  File "screen_script.py", line 224, in <module>
    weighted_process(weights=[0.99, 0.01], save_name="nn_o")
  File "screen_script.py", line 161, in weighted_process
    params['date_weight_past_train_end_time_case_str'] = get_weight_past_train_end_time_case_str(date_weights)
  File "screen_script.py", line 58, in get_weight_past_train_end_time_case_str
    s += f" ELSE '{date_list[0]}'::TIMESTAMP END"
NameError: name 'date_list' is not defined
[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_ccrowdfunding_replication[00m$ python screen_script.pyls[Kpython screen_script.pyls[Kgit statusvim screen_script.py[3@python[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[3Pvim[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[27m[29m[m[H[2J[?25l[24;1H"screen_script.py" 226L, 8542C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[4;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for  [5;1H2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: datee[7;1H_list[[31m0[m]}[8;9H[38;5;130melse[m:[9;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before curr[10;1Hrent month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recc[15;1Hent date used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;63H105,39[8C46%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[4;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2  [5;1Hmonth delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_ll[7;1Hist[[31m0[m]}[8;9H[38;5;130melse[m:[9;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before curree[10;1Hnt month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recenn[15;1Ht date used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;65H105,39[8C46%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[4;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month  [5;1Hdelay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]][7;1H}[8;9H[38;5;130melse[m:[9;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current monn[10;1Hth[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent datee[15;1H used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;71H105,39[8C46%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[4;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[5;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[6;9H[38;5;130melse[m:[7;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[8;13Hd = {}[9;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[10;17Hd[date_list[base - j]] = weights[j][11;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used  [12;1Hto compute adjustment[m[13;13Hdate_weights[date] = d[17;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[18;9Hconfig = yaml.full_load(fd)[19;9Hdburl = sqlalchemy.engine.url.URL([20;13H[31m"postgresql"[m,[21;13Hhost=config[[31m"host"[m],[22;13Husername=config[[31m"user"[m],[23;13Hdatabase=config[[31m"db"[m],[24;13Hpassword=config[[31m"pass"[m],[25;77H105,39[8C47%[9;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[4;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[5;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[6;9H[38;5;130melse[m:[7;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[8;13Hd = {}[9;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[10;17Hd[date_list[base - j]] = weights[j][11;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used too[12;1H compute adjustment[m[13;13Hdate_weights[date] = d[17;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[18;9Hconfig = yaml.full_load(fd)[19;9Hdburl = sqlalchemy.engine.url.URL([20;13H[31m"postgresql"[m,[21;13Hhost=config[[31m"host"[m],[22;13Husername=config[[31m"user"[m],[23;13Hdatabase=config[[31m"db"[m],[24;13Hpassword=config[[31m"pass"[m],[25;79H105,39[8C47%[9;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hi_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[4;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[5;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[6;9H[38;5;130melse[m:[7;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[8;13Hd = {}[9;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[10;17Hd[date_list[base - j]] = weights[j][11;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compp[12;1Hute adjustment[m[13;13Hdate_weights[date] = d[17;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[18;9Hconfig = yaml.full_load(fd)[19;9Hdburl = sqlalchemy.engine.url.URL([20;13H[31m"postgresql"[m,[21;13Hhost=config[[31m"host"[m],[22;13Husername=config[[31m"user"[m],[23;13Hdatabase=config[[31m"db"[m],[24;13Hpassword=config[[31m"pass"[m],[25;13Hport=config[[31m"port"[m],[26;84H105,39[8C47%[9;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to computt[13;1He adjustment[m[14;13Hdate_weights[date] = d[18;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[19;9Hconfig = yaml.full_load(fd)[20;9Hdburl = sqlalchemy.engine.url.URL([21;13H[31m"postgresql"[m,[22;13Hhost=config[[31m"host"[m],[23;13Husername=config[[31m"user"[m],[24;13Hdatabase=config[[31m"db"[m],[25;13Hpassword=config[[31m"pass"[m],[26;13Hport=config[[31m"port"[m],[27;86H105,39[8C47%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjj[13;1Hustment[m[14;13Hdate_weights[date] = d[18;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[19;9Hconfig = yaml.full_load(fd)[20;9Hdburl = sqlalchemy.engine.url.URL([21;13H[31m"postgresql"[m,[22;13Hhost=config[[31m"host"[m],[23;13Husername=config[[31m"user"[m],[24;13Hdatabase=config[[31m"db"[m],[25;13Hpassword=config[[31m"pass"[m],[26;13Hport=config[[31m"port"[m],[27;9H)[28;91H105,39[8C47%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjuss[13;1Htment[m[14;13Hdate_weights[date] = d[18;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[19;9Hconfig = yaml.full_load(fd)[20;9Hdburl = sqlalchemy.engine.url.URL([21;13H[31m"postgresql"[m,[22;13Hhost=config[[31m"host"[m],[23;13Husername=config[[31m"user"[m],[24;13Hdatabase=config[[31m"db"[m],[25;13Hpassword=config[[31m"pass"[m],[26;13Hport=config[[31m"port"[m],[27;9H)[28;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[29;93H105,39[8C47%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustmee[13;1Hnt[m[14;13Hdate_weights[date] = d[18;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[19;9Hconfig = yaml.full_load(fd)[20;9Hdburl = sqlalchemy.engine.url.URL([21;13H[31m"postgresql"[m,[22;13Hhost=config[[31m"host"[m],[23;13Husername=config[[31m"user"[m],[24;13Hdatabase=config[[31m"db"[m],[25;13Hpassword=config[[31m"pass"[m],[26;13Hport=config[[31m"port"[m],[27;9H)[28;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[30;96H105,39[8C47%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[13;13Hdate_weights[date] = d[17;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[18;9Hconfig = yaml.full_load(fd)[19;9Hdburl = sqlalchemy.engine.url.URL([20;13H[31m"postgresql"[m,[21;13Hhost=config[[31m"host"[m],[22;13Husername=config[[31m"user"[m],[23;13Hdatabase=config[[31m"db"[m],[24;13Hpassword=config[[31m"pass"[m],[25;13Hport=config[[31m"port"[m],[26;9H)[27;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[31;98H105,39[8C48%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[13;13Hdate_weights[date] = d[17;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[18;9Hconfig = yaml.full_load(fd)[19;9Hdburl = sqlalchemy.engine.url.URL([20;13H[31m"postgresql"[m,[21;13Hhost=config[[31m"host"[m],[22;13Husername=config[[31m"user"[m],[23;13Hdatabase=config[[31m"db"[m],[24;13Hpassword=config[[31m"pass"[m],[25;13Hport=config[[31m"port"[m],[26;9H)[27;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[31;100H105,39[8C48%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[5;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[6;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[7;9H[38;5;130melse[m:[8;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[9;13Hd = {}[10;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[11;17Hd[date_list[base - j]] = weights[j][12;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[13;13Hdate_weights[date] = d[17;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[18;9Hconfig = yaml.full_load(fd)[19;9Hdburl = sqlalchemy.engine.url.URL([20;13H[31m"postgresql"[m,[21;13Hhost=config[[31m"host"[m],[22;13Husername=config[[31m"user"[m],[23;13Hdatabase=config[[31m"db"[m],[24;13Hpassword=config[[31m"pass"[m],[25;13Hport=config[[31m"port"[m],[26;9H)[27;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[31;5HENTITY_DEMO_FILES = {[32;103H105,39[8C48%[10;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-00[2;1H5-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[7;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[8;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[9;9H[38;5;130melse[m:[10;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[15;13Hdate_weights[date] = d[19;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[20;9Hconfig = yaml.full_load(fd)[21;9Hdburl = sqlalchemy.engine.url.URL([22;13H[31m"postgresql"[m,[23;13Hhost=config[[31m"host"[m],[24;13Husername=config[[31m"user"[m],[25;13Hdatabase=config[[31m"db"[m],[26;13Hpassword=config[[31m"pass"[m],[27;13Hport=config[[31m"port"[m],[28;9H)[29;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[33;105H105,39[8C48%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-055[2;1H-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[7;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[8;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[9;9H[38;5;130melse[m:[10;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[15;13Hdate_weights[date] = d[19;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[20;9Hconfig = yaml.full_load(fd)[21;9Hdburl = sqlalchemy.engine.url.URL([22;13H[31m"postgresql"[m,[23;13Hhost=config[[31m"host"[m],[24;13Husername=config[[31m"user"[m],[25;13Hdatabase=config[[31m"db"[m],[26;13Hpassword=config[[31m"pass"[m],[27;13Hport=config[[31m"port"[m],[28;9H)[29;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[33;106H105,39[8C48%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05--[2;1H01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[7;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[8;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[9;9H[38;5;130melse[m:[10;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[15;13Hdate_weights[date] = d[19;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[20;9Hconfig = yaml.full_load(fd)[21;9Hdburl = sqlalchemy.engine.url.URL([22;13H[31m"postgresql"[m,[23;13Hhost=config[[31m"host"[m],[24;13Husername=config[[31m"user"[m],[25;13Hdatabase=config[[31m"db"[m],[26;13Hpassword=config[[31m"pass"[m],[27;13Hport=config[[31m"port"[m],[28;9H)[29;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[33;107H105,39[8C48%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m,,[2;1H [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[7;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[8;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[9;9H[38;5;130melse[m:[10;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[15;13Hdate_weights[date] = d[19;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[20;9Hconfig = yaml.full_load(fd)[21;9Hdburl = sqlalchemy.engine.url.URL([22;13H[31m"postgresql"[m,[23;13Hhost=config[[31m"host"[m],[24;13Husername=config[[31m"user"[m],[25;13Hdatabase=config[[31m"db"[m],[26;13Hpassword=config[[31m"pass"[m],[27;13Hport=config[[31m"port"[m],[28;9H)[29;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[33;5HENTITY_DEMO_FILES = {[34;111H105,39[8C48%[12;39H[?25h[27m[29m[m[H[2J[?25l[1;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-00[2;1H7-01'[m, [31m'2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[7;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[8;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[9;9H[38;5;130melse[m:[10;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[11;13Hd = {}[12;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[13;17Hd[date_list[base - j]] = weights[j][14;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[15;13Hdate_weights[date] = d[19;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[20;9Hconfig = yaml.full_load(fd)[21;9Hdburl = sqlalchemy.engine.url.URL([22;13H[31m"postgresql"[m,[23;13Hhost=config[[31m"host"[m],[24;13Husername=config[[31m"user"[m],[25;13Hdatabase=config[[31m"db"[m],[26;13Hpassword=config[[31m"pass"[m],[27;13Hport=config[[31m"port"[m],[28;9H)[29;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[33;5HENTITY_DEMO_FILES = {[34;9H[31m'joco'[m: {[35;119H105,39[8C48%[12;39H[?25h[27m[29m[m[H[2J[?25l[2;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m,,[3;1H [31m'2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[8;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[9;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[10;9H[38;5;130melse[m:[11;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[12;13Hd = {}[13;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[14;17Hd[date_list[base - j]] = weights[j][15;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;13Hhost=config[[31m"host"[m],[25;13Husername=config[[31m"user"[m],[26;13Hdatabase=config[[31m"db"[m],[27;13Hpassword=config[[31m"pass"[m],[28;13Hport=config[[31m"port"[m],[29;9H)[30;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[34;5HENTITY_DEMO_FILES = {[35;9H[31m'joco'[m: {[36;125H105,39[8C48%[13;39H[?25h[27m[29m[m[H[2J[?25l[2;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m''[3;1H2012-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[8;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[9;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[10;9H[38;5;130melse[m:[11;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[12;13Hd = {}[13;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[14;17Hd[date_list[base - j]] = weights[j][15;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;13Hhost=config[[31m"host"[m],[25;13Husername=config[[31m"user"[m],[26;13Hdatabase=config[[31m"db"[m],[27;13Hpassword=config[[31m"pass"[m],[28;13Hport=config[[31m"port"[m],[29;9H)[30;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[34;5HENTITY_DEMO_FILES = {[35;9H[31m'joco'[m: {[36;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[37;127H105,39[8C48%[13;39H[?25h[27m[29m[m[H[2J[?25l[2;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'20122[3;1H-09-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[8;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[9;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[10;9H[38;5;130melse[m:[11;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[12;13Hd = {}[13;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[14;17Hd[date_list[base - j]] = weights[j][15;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;13Hhost=config[[31m"host"[m],[25;13Husername=config[[31m"user"[m],[26;13Hdatabase=config[[31m"db"[m],[27;13Hpassword=config[[31m"pass"[m],[28;13Hport=config[[31m"port"[m],[29;9H)[30;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[34;5HENTITY_DEMO_FILES = {[35;9H[31m'joco'[m: {[36;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[37;13H[31m'check_sql'[m: [31m"""[m[38;131H105,39[8C48%[13;39H[?25h[27m[29m[m[H[2J[?25l[2;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-00[3;1H9-01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[8;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[9;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[10;9H[38;5;130melse[m:[11;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[12;13Hd = {}[13;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[14;17Hd[date_list[base - j]] = weights[j][15;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[16;13Hdate_weights[date] = d[20;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[21;9Hconfig = yaml.full_load(fd)[22;9Hdburl = sqlalchemy.engine.url.URL([23;13H[31m"postgresql"[m,[24;13Hhost=config[[31m"host"[m],[25;13Husername=config[[31m"user"[m],[26;13Hdatabase=config[[31m"db"[m],[27;13Hpassword=config[[31m"pass"[m],[28;13Hport=config[[31m"port"[m],[29;9H)[30;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[34;5HENTITY_DEMO_FILES = {[35;9H[31m'joco'[m: {[36;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[37;13H[31m'check_sql'[m: [31m"""[m[38;133H105,39[8C48%[13;39H[?25h[27m[29m[m[H[2J[?25l[3;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09--[4;1H01'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[9;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[10;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[11;9H[38;5;130melse[m:[12;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[13;13Hd = {}[14;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[15;17Hd[date_list[base - j]] = weights[j][16;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[17;13Hdate_weights[date] = d[21;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[22;9Hconfig = yaml.full_load(fd)[23;9Hdburl = sqlalchemy.engine.url.URL([24;13H[31m"postgresql"[m,[25;13Hhost=config[[31m"host"[m],[26;13Husername=config[[31m"user"[m],[27;13Hdatabase=config[[31m"db"[m],[28;13Hpassword=config[[31m"pass"[m],[29;13Hport=config[[31m"port"[m],[30;9H)[31;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[35;5HENTITY_DEMO_FILES = {[36;9H[31m'joco'[m: {[37;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[38;13H[31m'check_sql'[m: [31m"""[m[39;135H105,39[8C48%[14;39H[?25h[27m[29m[m[H[2J[?25l[3;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-011[4;1H'[m, [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[9;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[10;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[11;9H[38;5;130melse[m:[12;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[13;13Hd = {}[14;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[15;17Hd[date_list[base - j]] = weights[j][16;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[17;13Hdate_weights[date] = d[21;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[22;9Hconfig = yaml.full_load(fd)[23;9Hdburl = sqlalchemy.engine.url.URL([24;13H[31m"postgresql"[m,[25;13Hhost=config[[31m"host"[m],[26;13Husername=config[[31m"user"[m],[27;13Hdatabase=config[[31m"db"[m],[28;13Hpassword=config[[31m"pass"[m],[29;13Hport=config[[31m"port"[m],[30;9H)[31;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[35;5HENTITY_DEMO_FILES = {[36;9H[31m'joco'[m: {[37;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[38;13H[31m'check_sql'[m: [31m"""[m[39;137H105,39[8C48%[14;39H[?25h[27m[29m[m[H[2J[?25l[3;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m,,[4;1H [31m'2012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[9;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[10;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[11;9H[38;5;130melse[m:[12;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[13;13Hd = {}[14;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[15;17Hd[date_list[base - j]] = weights[j][16;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[17;13Hdate_weights[date] = d[21;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[22;9Hconfig = yaml.full_load(fd)[23;9Hdburl = sqlalchemy.engine.url.URL([24;13H[31m"postgresql"[m,[25;13Hhost=config[[31m"host"[m],[26;13Husername=config[[31m"user"[m],[27;13Hdatabase=config[[31m"db"[m],[28;13Hpassword=config[[31m"pass"[m],[29;13Hport=config[[31m"port"[m],[30;9H)[31;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[35;5HENTITY_DEMO_FILES = {[36;9H[31m'joco'[m: {[37;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[38;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS ([m[40;139H105,39[8C48%[14;39H[?25h[27m[29m[m[H[2J[?25l[3;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'22[4;1H012-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[9;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[10;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[11;9H[38;5;130melse[m:[12;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[13;13Hd = {}[14;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[15;17Hd[date_list[base - j]] = weights[j][16;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[17;13Hdate_weights[date] = d[21;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[22;9Hconfig = yaml.full_load(fd)[23;9Hdburl = sqlalchemy.engine.url.URL([24;13H[31m"postgresql"[m,[25;13Hhost=config[[31m"host"[m],[26;13Husername=config[[31m"user"[m],[27;13Hdatabase=config[[31m"db"[m],[28;13Hpassword=config[[31m"pass"[m],[29;13Hport=config[[31m"port"[m],[30;9H)[31;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[35;5HENTITY_DEMO_FILES = {[36;9H[31m'joco'[m: {[37;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[38;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VARCHAR)::TIMESTAMP) AS num_match[m[41;142H105,39[8C49%[14;39H[?25h[27m[29m[m[H[2J[?25l[3;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'200[4;1H12-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[9;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[10;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[11;9H[38;5;130melse[m:[12;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[13;13Hd = {}[14;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[15;17Hd[date_list[base - j]] = weights[j][16;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[17;13Hdate_weights[date] = d[21;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[22;9Hconfig = yaml.full_load(fd)[23;9Hdburl = sqlalchemy.engine.url.URL([24;13H[31m"postgresql"[m,[25;13Hhost=config[[31m"host"[m],[26;13Husername=config[[31m"user"[m],[27;13Hdatabase=config[[31m"db"[m],[28;13Hpassword=config[[31m"pass"[m],[29;13Hport=config[[31m"port"[m],[30;9H)[31;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[35;5HENTITY_DEMO_FILES = {[36;9H[31m'joco'[m: {[37;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[38;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VARCHAR)::TIMESTAMP) AS num_match[m[41;143H105,39[8C49%[14;39H[?25h[27m[29m[m[H[2J[?25l[1;6H([31m'2012-09-01'[m, [31m'2013-01-01'[m)][4;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'20122[5;1H-11-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[10;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[11;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[12;9H[38;5;130melse[m:[13;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[14;13Hd = {}[15;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[16;17Hd[date_list[base - j]] = weights[j][17;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[18;13Hdate_weights[date] = d[22;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[23;9Hconfig = yaml.full_load(fd)[24;9Hdburl = sqlalchemy.engine.url.URL([25;13H[31m"postgresql"[m,[26;13Hhost=config[[31m"host"[m],[27;13Husername=config[[31m"user"[m],[28;13Hdatabase=config[[31m"db"[m],[29;13Hpassword=config[[31m"pass"[m],[30;13Hport=config[[31m"port"[m],[31;9H)[32;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[36;5HENTITY_DEMO_FILES = {[37;9H[31m'joco'[m: {[38;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[39;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VARCHAR)::TIMESTAMP) AS num_match[m[42;145H105,39[8C48%[15;39H[?25h[27m[29m[m[H[2J[?25l[1;6H([31m'2012-09-01'[m, [31m'2013-01-01'[m)][4;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-11[5;1H1-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[10;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[11;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[12;9H[38;5;130melse[m:[13;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[14;13Hd = {}[15;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[16;17Hd[date_list[base - j]] = weights[j][17;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[18;13Hdate_weights[date] = d[22;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[23;9Hconfig = yaml.full_load(fd)[24;9Hdburl = sqlalchemy.engine.url.URL([25;13H[31m"postgresql"[m,[26;13Hhost=config[[31m"host"[m],[27;13Husername=config[[31m"user"[m],[28;13Hdatabase=config[[31m"db"[m],[29;13Hpassword=config[[31m"pass"[m],[30;13Hport=config[[31m"port"[m],[31;9H)[32;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[36;5HENTITY_DEMO_FILES = {[37;9H[31m'joco'[m: {[38;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[39;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VARCHAR)::TIMESTAMP) AS num_match
                    FROM tmp_bias_models[m[43;147H105,39[8C49%[15;39H[?25h[27m[29m[m[H[2J[?25l[1;6H([31m'2012-09-01'[m, [31m'2013-01-01'[m)][4;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-111[5;1H-01'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[10;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[11;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[12;9H[38;5;130melse[m:[13;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[14;13Hd = {}[15;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[16;17Hd[date_list[base - j]] = weights[j][17;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[18;13Hdate_weights[date] = d[22;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[23;9Hconfig = yaml.full_load(fd)[24;9Hdburl = sqlalchemy.engine.url.URL([25;13H[31m"postgresql"[m,[26;13Hhost=config[[31m"host"[m],[27;13Husername=config[[31m"user"[m],[28;13Hdatabase=config[[31m"db"[m],[29;13Hpassword=config[[31m"pass"[m],[30;13Hport=config[[31m"port"[m],[31;9H)[32;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[36;5HENTITY_DEMO_FILES = {[37;9H[31m'joco'[m: {[38;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[39;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config->'matchdatetime')::VARCHAR)::TIMESTAMP) AS num_match
                    FROM tmp_bias_models[m[43;148H105,39[8C49%[15;39H[?25h[27m[29m[m[H[2J[?25l[1;6H([31m'2012-09-01'[m, [31m'2013-01-01'[m)][4;5Hdate_list = [[31m'2011-03-01'[m, [31m'2011-05-01'[m, [31m'2011-07-01'[m, [31m'2011-09-01'[m, [31m'2011-11-01'[m, [31m'2012-01-01'[m, [31m'2012-03-01'[m, [31m'2012-05-01'[m, [31m'2012-07-01'[m, [31m'2012-09-01'[m, [31m'2012-11-00[5;1H1'[m, [31m'2013-01-01'[m]
    date_weights = {}
    i_lim = [36mlen[m(weights)
    [38;5;130massert[m i_lim >= [31m2[m
    [38;5;130mfor[m i, date [38;5;130min[m [36menumerate[m(date_list):[10;9H[38;5;130mif[m i - i_lim <= [31m0[m: [34m# Then no space for all weights, We use <= not < for 2 month delay[m[11;13Hdate_weights[date] = {date_list[[31m0[m]: [31m1.0[m, [31m"past_train_end_time"[m: date_list[[31m0[m]}[12;9H[38;5;130melse[m:[13;13Hbase = i - [31m2[m [34m# No matter what latest time we can use is 2 before current month[m[14;13Hd = {}[15;13H[38;5;130mfor[m j [38;5;130min[m [36mrange[m([36mlen[m[106m([mweights[106m)[m):[16;17Hd[date_list[base - j]] = weights[j][17;13Hd[[31m"past_train_end_time"[m] =  date_list[base] [34m# Should be the most recent date used to compute adjustment[m[18;13Hdate_weights[date] = d[22;5H[38;5;130mwith[m [36mopen[m([31m'db_profile.yaml'[m) [38;5;130mas[m fd:[23;9Hconfig = yaml.full_load(fd)[24;9Hdburl = sqlalchemy.engine.url.URL([25;13H[31m"postgresql"[m,[26;13Hhost=config[[31m"host"[m],[27;13Husername=config[[31m"user"[m],[28;13Hdatabase=config[[31m"db"[m],[29;13Hpassword=config[[31m"pass"[m],[30;13Hport=config[[31m"port"[m],[31;9H)[32;9Hengine_donors = sqlalchemy.create_engine(dburl, poolclass=sqlalchemy.pool.QueuePool)[36;5HENTITY_DEMO_FILES = {[37;9H[31m'joco'[m: {[38;13H[31m'sql_tmpl'[m: [31m'joco_entity_demos.sql.tmpl'[m,[39;13H[31m'check_sql'[m: [31m"""
                WITH all_matches AS (
                    SELECT COUNT(DISTINCT ((mg.model_config-[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_crowdfunding_replication[00m$ python screen_script.py
screen_script.py:117: SADeprecationWarning: Calling URL() directly is deprecated and will be disabled in a future release.  The public constructor for URL is now the URL.create() method.
  dburl = sqlalchemy.engine.url.URL(
[('2011-03-01', '2011-03-01'), ('2011-03-01', '2011-07-01')]
/home/dhananja/.pyenv/versions/3.8.1/lib/python3.8/site-packages/dateparser/date_parser.py:35: PytzUsageWarning: The localize method is no longer necessary, as this time zone supports the fold attribute (PEP 495). For more details on migrating to a PEP 495-compliant implementation, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html
  date_obj = stz.localize(date_obj)
[('2011-05-01', '2011-05-01'), ('2011-05-01', '2011-09-01')]
[('2011-07-01', '2011-07-01'), ('2011-07-01', '2011-11-01')]
[('2011-09-01', '2011-09-01'), ('2011-09-01', '2012-01-01')]
[('2011-11-01', '2011-11-01'), ('2011-11-01', '2012-03-01')]
[('2012-01-01', '2012-01-01'), ('2012-01-01', '2012-05-01')]
[('2012-03-01', '2012-03-01'), ('2012-03-01', '2012-07-01')]
[('2012-05-01', '2012-05-01'), ('2012-05-01', '2012-09-01')]
[('2012-07-01', '2012-07-01'), ('2012-07-01', '2012-11-01')]
[('2012-09-01', '2012-09-01'), ('2012-09-01', '2013-01-01')]
[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_crowdfunding_replication[00m$ [K[01;32mdhananja@ip-10-0-1-114[00m:[01;34m~/peeps-chili/nature_machine_intelligence_2021/education_crowdffunding_replication[00m$ python screen_script.py[Knbk
[32m[I 19:53:19.847 NotebookApp](B[m Serving notebooks from local directory: /home/dhananja/peeps-chili/nature_machine_intelligence_2021/education_crowdfunding_replication
[32m[I 19:53:19.847 NotebookApp](B[m Jupyter Notebook 6.4.12 is running at:
[32m[I 19:53:19.848 NotebookApp](B[m http://localhost:1099/?token=261e09332cc14d904d216a68a3f69231984af89ea9d020e3
[32m[I 19:53:19.848 NotebookApp](B[m  or http://127.0.0.1:1099/?token=261e09332cc14d904d216a68a3f69231984af89ea9d020e3
[32m[I 19:53:19.848 NotebookApp](B[m Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[35m[C 19:53:19.853 NotebookApp](B[m 
    
    To access the notebook, open this file in a browser:
        file:///home/dhananja/.local/share/jupyter/runtime/nbserver-5252-open.html
    Or copy and paste one of these URLs:
        http://localhost:1099/?token=261e09332cc14d904d216a68a3f69231984af89ea9d020e3
     or http://127.0.0.1:1099/?token=261e09332cc14d904d216a68a3f69231984af89ea9d020e3
[32m[I 19:53:25.932 NotebookApp](B[m 302 GET /?token=261e09332cc14d904d216a68a3f69231984af89ea9d020e3 (127.0.0.1) 0.620000ms
[33m[W 19:53:30.690 NotebookApp](B[m Notebook education_crowdfunding_replication.ipynb is not trusted
[32m[I 19:53:32.042 NotebookApp](B[m Kernel started: 07111342-95e9-4931-9599-0ee7760ae239, name: py3env
[IPKernelApp] ERROR | No such comm target registered: jupyter.widget.control
[IPKernelApp] WARNING | No such comm: 3ac7fa5f-2614-45dd-9769-7c3a04b86cb1
[32m[I 19:55:35.730 NotebookApp](B[m Saving file at /education_crowdfunding_replication.ipynb
[33m[W 19:55:35.732 NotebookApp](B[m Notebook education_crowdfunding_replication.ipynb is not trusted
[32m[I 20:07:34.173 NotebookApp](B[m Saving file at /education_crowdfunding_replication.ipynb
[33m[W 20:07:34.175 NotebookApp](B[m Notebook education_crowdfunding_replication.ipynb is not trusted
[32m[I 20:21:13.502 NotebookApp](B[m Saving file at /recall_adjustment_pre.sql.tmpl
[32m[I 20:21:22.616 NotebookApp](B[m Saving file at /recall_adjustment_pre.sql.tmpl
[32m[I 20:27:41.979 NotebookApp](B[m Saving file at /education_crowdfunding_replication.ipynb
[33m[W 20:27:41.980 NotebookApp](B[m Notebook education_crowdfunding_replication.ipynb is not trusted
